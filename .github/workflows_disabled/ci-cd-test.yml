name: 🧪 Test Environment CI/CD Pipeline

# ========== 트리거 조건 수정 ==========
on:
  # 자동 트리거 (develop_deploy_pipeline 브랜치로 수정)
  push:
    branches: [develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

  # PR 트리거 (develop_deploy_pipeline로의 PR)
  pull_request:
    branches: [develop]
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

  # 수동 실행 (고급 옵션 포함)
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: '🐍 Deploy Backend to Test'
        type: boolean
        default: true
      deploy_frontend:
        description: '🎨 Deploy Frontend to Test'
        type: boolean
        default: true
      skip_tests:
        description: '⚡ Skip Quality Gate (Emergency Only)'
        type: boolean
        default: false
      debug_mode:
        description: '🔍 Enable Debug Logging'
        type: boolean
        default: false
      force_rebuild:
        description: '🔄 Force Rebuild Images (No Cache)'
        type: boolean
        default: false

  # 스케줄링 트리거 (선택적 - 야간 빌드)
  schedule:
    - cron: '0 2 * * 1-5'  # 평일 오전 2시 (KST 11시)

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  BACKEND_APP_NAME_TEST: "7ai-team1-backend-test"
  AZURE_RESOURCE_GROUP_TEST: ${{ secrets.AZURE_RESOURCE_GROUP }}
  # 🆕 진단 모드 추가
  DIAGNOSTIC_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
  # 🆕 Discord 알림 추가
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

jobs:
  # ========== 트리거 조건 체크 ==========
  trigger-validation:
    runs-on: ubuntu-latest
    name: 🔍 Validate Trigger Conditions
    outputs:
      should_deploy_backend: ${{ steps.conditions.outputs.should_deploy_backend }}
      should_deploy_frontend: ${{ steps.conditions.outputs.should_deploy_frontend }}
      deployment_reason: ${{ steps.conditions.outputs.deployment_reason }}

    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: 🔍 Analyze Trigger Conditions (Enhanced)
      id: conditions
      run: |
        echo "🔍 Analyzing trigger conditions..."
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          REASON="Manual execution by ${{ github.actor }}"
          BACKEND_DEPLOY="${{ github.event.inputs.deploy_backend }}"
          FRONTEND_DEPLOY="${{ github.event.inputs.deploy_frontend }}"
          echo "🔧 Manual trigger detected"
        elif [ "${{ github.event_name }}" = "schedule" ]; then
          REASON="Scheduled nightly build"
          BACKEND_DEPLOY="true"
          FRONTEND_DEPLOY="true"
          echo "⏰ Scheduled trigger detected"
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          REASON="Pull request validation"
          BACKEND_DEPLOY="false"
          FRONTEND_DEPLOY="false"
          echo "🔍 PR trigger detected - validation only"
        else
          REASON="Code push to develop"
          echo "📝 Push trigger detected - analyzing changed files..."
          
          git diff --name-only HEAD~ HEAD > changed_files.txt || echo "No previous commit to compare"
          
          echo "📋 Changed files:"
          cat changed_files.txt
          echo "================================"
          
          BACKEND_DEPLOY="false"
          FRONTEND_DEPLOY="false"
          
          if grep -E "^backend_py/" changed_files.txt >/dev/null 2>&1; then
            echo "🐍 Backend code changes detected"
            BACKEND_DEPLOY="true"
          fi
          
          if grep -E "^frontend/" changed_files.txt >/dev/null 2>&1; then
            echo "🎨 Frontend code changes detected"
            FRONTEND_DEPLOY="true"
          fi
          
          if grep -E "^\.github/workflows/" changed_files.txt >/dev/null 2>&1; then
            echo "🔧 GitHub Actions workflow changes detected - deploying all services"
            BACKEND_DEPLOY="true"
            FRONTEND_DEPLOY="true"
          fi
          
          if grep -E "(docker-compose|Dockerfile|package\.json|requirements\.txt|\.env|env-.*\.sh|validate-.*\.sh)" changed_files.txt >/dev/null 2>&1; then
            echo "📦 Infrastructure/Config changes detected - deploying all services"
            BACKEND_DEPLOY="true"
            FRONTEND_DEPLOY="true"
          fi
          
          if grep -E "^(tsconfig|vite\.config|tailwind\.config|postcss\.config|eslint|\.gitignore)" changed_files.txt >/dev/null 2>&1; then
            echo "⚙️ Root config changes detected - deploying frontend"
            FRONTEND_DEPLOY="true"
          fi
          
          if [ ! -s changed_files.txt ]; then
            echo "🚀 No previous commit found - forcing full deployment for safety"
            BACKEND_DEPLOY="true"
            FRONTEND_DEPLOY="true"
            REASON="First commit or new branch - full deployment"
          fi
        fi
        
        echo "should_deploy_backend=${BACKEND_DEPLOY}" >> $GITHUB_OUTPUT
        echo "should_deploy_frontend=${FRONTEND_DEPLOY}" >> $GITHUB_OUTPUT
        echo "deployment_reason=${REASON}" >> $GITHUB_OUTPUT
        
        echo "================================"
        echo "📋 Final Deployment Decision:"
        echo "- Reason: ${REASON}"
        echo "- Deploy Backend: ${BACKEND_DEPLOY}"
        echo "- Deploy Frontend: ${FRONTEND_DEPLOY}"
        echo "- Event: ${{ github.event_name }}"
        echo "- Actor: ${{ github.actor }}"
        echo "================================"

  # ========== 품질 게이트 ==========
  quality-gate:
    if: github.event.inputs.skip_tests != 'true' && github.event_name != 'pull_request'
    needs: trigger-validation
    runs-on: ubuntu-latest
    name: 🔍 Quality Gate

    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 🐍 Setup Python (No Pip Cache)
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🔧 Frontend Quality Check
      if: needs.trigger-validation.outputs.should_deploy_frontend == 'true' || github.event_name == 'schedule'
      run: |
        cd frontend
        echo "🔍 Installing frontend dependencies..."
        npm ci --legacy-peer-deps || {
          echo "⚠️ npm ci failed, falling back to npm install"
          rm -f package-lock.json
          npm install --include=dev
        }
        
        echo "🔍 Installing cross-env (Windows/Linux compatibility)..."
        npm install --save-dev cross-env || true
        
        echo "🔍 TypeScript check (lenient for Test environment)..."
        npx tsc --noEmit --skipLibCheck --exclude "**/test/**" --exclude "**/*.test.*" || {
          echo "⚠️ TypeScript warnings exist but continuing for Test environment"
        }
        
        echo "🔍 Build test..."
        rm -rf dist/
        VITE_API_URL=${{ secrets.TEST_BACKEND_URL }} npx vite build --mode test
        
        echo "✅ Frontend quality check passed"

    - name: 🔧 Backend Quality Check
      if: needs.trigger-validation.outputs.should_deploy_backend == 'true' || github.event_name == 'schedule'
      run: |
        cd backend_py
        echo "🔍 Installing Python dependencies (no cache)..."
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        
        echo "🔍 Python syntax check..."
        python -m py_compile app/main.py
        
        echo "🔍 FastAPI import test..."
        python -c "from app.main import app; print('✅ FastAPI app imports successfully')"
        
        echo "✅ Backend quality check passed"

    - name: 🎬 Video Feature Environment Check (Simplified)
      if: needs.trigger-validation.outputs.should_deploy_backend == 'true'
      run: |
        echo "🎬 Checking Vertex AI environment variables..."
        
        # 환경 변수만 확인
        echo "📋 Required environment variables:"
        echo "VERTEX_PROJECT_ID: ${VERTEX_PROJECT_ID:-not set}"
        echo "VERTEX_LOCATION: ${VERTEX_LOCATION:-not set}"
        echo "VERTEX_MODEL_ID: ${VERTEX_MODEL_ID:-not set}"
        echo "VERTEX_API_ENDPOINT: ${VERTEX_API_ENDPOINT:-not set}"
        
        # GitHub Secrets 존재 여부만 확인
        if [ -n "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}" ]; then
          echo "✅ Google service account credentials configured"
          echo "📏 Credentials length: $(echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}' | wc -c) characters"
        else
          echo "❌ Google service account credentials not configured"
        fi
        
        echo "✅ Video feature environment check completed"

        

  # ========== PR 전용 검증 ==========
  pr-validation:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: 🔍 PR Validation (No Deployment)

    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🔍 PR Code Validation
      run: |
        echo "🔍 Pull Request validation started..."
        
        if [ -d "frontend" ]; then
          cd frontend
          npm ci --legacy-peer-deps || npm install --include=dev
          npx tsc --noEmit --skipLibCheck || echo "⚠️ TypeScript warnings found"
          npm run build || echo "⚠️ Build warnings found"
          cd ..
        fi
        
        if [ -d "backend_py" ]; then
          cd backend_py
          pip install --no-cache-dir -r requirements.txt
          python -m py_compile app/main.py
          python -c "from app.main import app; print('✅ FastAPI validates')"
          cd ..
        fi
        
        echo "✅ PR validation completed - no deployment performed"

  # ========== 백엔드 빌드 & 배포 (수정됨) ==========
  deploy-backend:
    if: |
      github.event_name != 'pull_request' && 
      (needs.trigger-validation.outputs.should_deploy_backend == 'true' || 
       github.event.inputs.deploy_backend == 'true' ||
       github.event_name == 'schedule')
    needs: [trigger-validation, quality-gate]
    runs-on: ubuntu-latest
    name: 🐍 Deploy Backend to Test
    environment: test
    outputs:
      deployment_status: ${{ steps.deployment.outputs.status }}
      image_name: ${{ steps.build.outputs.image_name }}
      image_tag: ${{ steps.build.outputs.image_tag }}

    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Debug Deployment Context
      if: github.event.inputs.debug_mode == 'true'
      run: |
        echo "=== Deployment Context Debug ==="
        echo "Event: ${{ github.event_name }}"
        echo "Actor: ${{ github.actor }}"
        echo "Reason: ${{ needs.trigger-validation.outputs.deployment_reason }}"
        echo "Force Rebuild: ${{ github.event.inputs.force_rebuild }}"
        echo "App Service: ${{ env.BACKEND_APP_NAME_TEST }}"
        echo "Resource Group: ${{ env.AZURE_RESOURCE_GROUP_TEST }}"
        echo "================================"

    - name: 🔐 Login to Azure
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: 🔍 Verify Permissions and Resources (Enhanced)
      run: |
        echo "🔍 Verifying Azure authentication and permissions..."
        
        # Azure CLI 재시도 함수
        retry_az() {
          local cmd="$1"
          local desc="$2"
          local max_attempts=3
          
          for attempt in $(seq 1 $max_attempts); do
            echo "🔄 [$attempt/$max_attempts] $desc"
            if eval "$cmd"; then
              echo "✅ Success: $desc"
              return 0
            elif [ $attempt -eq $max_attempts ]; then
              echo "❌ Failed after $max_attempts attempts: $desc"
              return 1
            else
              echo "⏳ Waiting 30s..."
              sleep 30
            fi
          done
        }
        
        # 검증 실행
        retry_az "az account show --query '{SubscriptionId:id, User:user.name}'" "Azure account verification"
        retry_az "az webapp show --name '${{ env.BACKEND_APP_NAME_TEST }}' --resource-group '${{ env.AZURE_RESOURCE_GROUP_TEST }}' --query '{Name:name, State:state}'" "App Service verification"


    - name: 🔐 Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: 🏗️ Build and Push Backend Image (With Retry)
      id: build
      run: |
        cd backend_py
        echo "🏗️ Building backend Docker image for Test environment..."
        
        # 재시도 설정
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        # Docker 빌드 및 푸시 함수
        build_and_push() {
          echo "📦 Starting Docker build attempt..."
          
          IMAGE_NAME="${{ env.REGISTRY }}/backend-fastapi-test"
          IMAGE_TAG="${{ github.sha }}"
          
          # 캐시 전략
          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "🔄 Force rebuild - using --no-cache"
            CACHE_OPTION="--no-cache"
          else
            echo "📦 Using build cache"
            CACHE_OPTION=""
          fi
          
          # Docker 빌드
          if ! docker build \
            ${CACHE_OPTION} \
            --platform linux/amd64 \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            -t ${IMAGE_NAME}:latest \
            -t ${IMAGE_NAME}:${IMAGE_TAG} \
            -f Dockerfile .; then
            echo "❌ Docker build failed"
            return 1
          fi
          
          # Docker 푸시
          echo "📤 Pushing to ACR..."
          if ! docker push ${IMAGE_NAME}:latest || ! docker push ${IMAGE_NAME}:${IMAGE_TAG}; then
            echo "❌ Docker push failed"
            return 1
          fi
          
          # 성공 시 outputs 설정
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "✅ Build and push completed"
          return 0
        }
        
        # 재시도 루프
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "🔄 Build attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
          
          if build_and_push; then
            echo "✅ Build successful on attempt $((RETRY_COUNT + 1))"
            break
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              WAIT_TIME=$((RETRY_COUNT * 30))
              echo "⚠️ Build failed, retrying in ${WAIT_TIME}s..."
              docker system prune -f --volumes || true
              sleep $WAIT_TIME
            else
              echo "❌ Build failed after $MAX_RETRIES attempts"
              docker system df || true
              exit 1
            fi
          fi
        done


    - name: 🚀 Deploy to Azure App Service (Test) (Enhanced)
      id: deployment
      run: |
        echo "🚀 Deploying container to Test App Service..."
        
        # 재시도 함수
        retry_az() {
          local cmd="$1"
          local desc="$2"
          
          for attempt in 1 2 3; do
            echo "🔄 [$attempt/3] $desc"
            if eval "$cmd"; then
              echo "✅ Success: $desc"
              return 0
            elif [ $attempt -eq 3 ]; then
              echo "❌ Failed: $desc"
              return 1
            else
              sleep 45
            fi
          done
        }
        
        # 컨테이너 배포
        DEPLOY_CMD="az webapp config container set \
          --name '${{ env.BACKEND_APP_NAME_TEST }}' \
          --resource-group '${{ env.AZURE_RESOURCE_GROUP_TEST }}' \
          --docker-custom-image-name '${{ steps.build.outputs.image_name }}:latest' \
          --docker-registry-server-url 'https://${{ env.REGISTRY }}' \
          --docker-registry-server-user '${{ secrets.ACR_USERNAME }}' \
          --docker-registry-server-password '${{ secrets.ACR_PASSWORD }}'"
        
        if retry_az "$DEPLOY_CMD" "Container deployment"; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi


    - name: ⚙️ Configure Test Environment Variables (Fixed)
      run: |
        echo "⚙️ Configuring Test App Service environment variables..."
        
        # 재시도 함수 (기존 유지)
        retry_az() {
          local cmd="$1"
          for attempt in 1 2 3; do
            echo "🔄 [$attempt/3] Environment variables configuration"
            if eval "$cmd"; then
              echo "✅ Success"
              return 0
            elif [ $attempt -eq 3 ]; then
              echo "❌ Failed"
              return 1
            else
              sleep 30
            fi
          done
        }
        
        # 환경 변수 유효성 검사 (기존 로직 유지)
        if [ -z "${{ secrets.TEST_GEMINI_API_KEY }}" ] || [ "${{ secrets.TEST_GEMINI_API_KEY }}" = "-" ]; then
          GEMINI_KEY="${{ secrets.GEMINI_API_KEY }}"
        else
          GEMINI_KEY="${{ secrets.TEST_GEMINI_API_KEY }}"
        fi
        
        DB_HOST_VALUE="${{ secrets.TEST_DB_HOST }}"
        [ -z "$DB_HOST_VALUE" ] && DB_HOST_VALUE="ai-final-team1-db.postgres.database.azure.com"
        DB_USER_VALUE="${{ secrets.TEST_DB_USER }}"
        [ -z "$DB_USER_VALUE" ] && DB_USER_VALUE="adminDB"
        DB_PASSWORD_VALUE="${{ secrets.TEST_DB_PASSWORD }}"
        [ -z "$DB_PASSWORD_VALUE" ] && DB_PASSWORD_VALUE="qwer123!"
        DB_NAME_VALUE="${{ secrets.TEST_DB_NAME }}"
        [ -z "$DB_NAME_VALUE" ] && DB_NAME_VALUE="postgres"
        
        # 🔒 Google Credentials를 Base64로 인코딩 (안전한 전송)
        GOOGLE_CREDS_B64=$(echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}' | base64 -w 0)
        
        # ✅ 안전한 환경 변수 설정
        ENV_CMD="az webapp config appsettings set \
          --name '${{ env.BACKEND_APP_NAME_TEST }}' \
          --resource-group '${{ env.AZURE_RESOURCE_GROUP_TEST }}' \
          --settings \
            PORT=3001 \
            HOST=0.0.0.0 \
            NODE_ENV=test \
            FRONTEND_URL='${{ secrets.TEST_FRONTEND_URL }}' \
            GEMINI_API_KEY='${GEMINI_KEY}' \
            GEMINI_MODEL='gemini-2.5-flash-image-preview' \
            GEMINI_TEMPERATURE=0.2 \
            AZURE_OPENAI_ENDPOINT='${{ secrets.TEST_AZURE_OPENAI_ENDPOINT }}' \
            AZURE_OPENAI_KEY='${{ secrets.TEST_AZURE_OPENAI_KEY }}' \
            AZURE_OPENAI_DEPLOYMENT_ID='${{ secrets.TEST_AZURE_OPENAI_DEPLOYMENT_ID }}' \
            AZURE_OPENAI_API_VERSION='2024-12-01-preview' \
            DB_HOST='${DB_HOST_VALUE}' \
            DB_USER='${DB_USER_VALUE}' \
            DB_PASSWORD='${DB_PASSWORD_VALUE}' \
            DB_NAME='${DB_NAME_VALUE}' \
            DB_PORT=5432 \
            DB_SSLMODE=require \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
            DOCKER_ENABLE_CI=true \
            WEBSITES_PORT=3001 \
            VERTEX_PROJECT_ID='${{ secrets.VERTEX_PROJECT_ID }}' \
            VERTEX_LOCATION='${{ secrets.VERTEX_LOCATION }}' \
            VERTEX_MODEL_ID='${{ secrets.VERTEX_MODEL_ID }}' \
            VERTEX_API_ENDPOINT='${{ secrets.VERTEX_API_ENDPOINT }}' \
            GOOGLE_APPLICATION_CREDENTIALS_B64='${GOOGLE_CREDS_B64}' \
            VERTEX_VIDEO_SAMPLE_COUNT=1 \
            VERTEX_VIDEO_PERSON_GENERATION=allow_all \
            VERTEX_VIDEO_ADD_WATERMARK=true \
            VERTEX_VIDEO_INCLUDE_RAI_REASON=false \
            VERTEX_VIDEO_GENERATE_AUDIO=false"
        
        retry_az "$ENV_CMD"
        echo "✅ Environment variables configured successfully (Google credentials as Base64)"

        

    # 🆕 여기에 추가 (기존 마지막 스텝 다음)
    - name: 📋 Collect Backend Deployment Logs (On Failure)
      if: failure()
      run: |
        echo "📋 Collecting detailed failure logs for backend deployment..."
        
        # 1. Docker 관련 로그 수집
        echo "🐳 Docker System Information:"
        docker system df || true
        docker images --filter "reference=${{ env.REGISTRY }}/backend-fastapi-test" || true
        docker system events --since 1h --until now || true
        
        # 2. Azure App Service 로그 수집
        echo "🔍 Azure App Service Diagnostics:"
        az webapp log download \
          --name "${{ env.BACKEND_APP_NAME_TEST }}" \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP_TEST }}" \
          --log-file "backend-logs.zip" || true
        
        # 3. App Service 상태 정보
        az webapp show \
          --name "${{ env.BACKEND_APP_NAME_TEST }}" \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP_TEST }}" \
          --query "{state:state, availabilityState:availabilityState, lastModifiedTimeUtc:lastModifiedTimeUtc, defaultHostName:defaultHostName}" \
          --output table || true
        
        # 4. 컨테이너 설정 확인
        az webapp config container show \
          --name "${{ env.BACKEND_APP_NAME_TEST }}" \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP_TEST }}" || true
        
        # 5. 최근 배포 히스토리
        az webapp deployment list \
          --name "${{ env.BACKEND_APP_NAME_TEST }}" \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP_TEST }}" \
          --query "[0:5].{id:id, status:status, startTime:startTime, endTime:endTime}" \
          --output table || true
        
        # 6. 환경 변수 확인 (민감 정보 제외)
        echo "⚙️ Environment Variables (non-sensitive):"
        az webapp config appsettings list \
          --name "${{ env.BACKEND_APP_NAME_TEST }}" \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP_TEST }}" \
          --query "[?!contains(name,'KEY') && !contains(name,'PASSWORD') && !contains(name,'SECRET')].{name:name, value:value}" \
          --output table || true
        
        # 7. 실패 정보를 환경 변수로 저장
        echo "BACKEND_FAILURE_REASON=Deployment step failed" >> $GITHUB_ENV
        echo "BACKEND_FAILURE_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_ENV

    # 🆕 여기에 추가
    - name: 🚨 Discord Notification - Backend Deployment Failed
      if: failure()
      run: |
        echo "🚨 Backend deployment failed, sending Discord notification..."
        
        if [ -n "${{ env.DISCORD_WEBHOOK_URL }}" ]; then
          # Discord 메시지 생성
          EMBED_COLOR="15158332" # 빨간색
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Discord Webhook 페이로드 생성
          PAYLOAD=$(cat << EOF
        {
          "embeds": [{
            "title": "🚨 Backend Deployment Failed",
            "description": "Test environment backend deployment encountered an error",
            "color": $EMBED_COLOR,
            "timestamp": "$TIMESTAMP",
            "fields": [
              {
                "name": "🏷️ Job",
                "value": "${{ github.job }}",
                "inline": true
              },
              {
                "name": "🌿 Branch",
                "value": "${{ github.ref_name }}",
                "inline": true
              },
              {
                "name": "👤 Actor",
                "value": "${{ github.actor }}",
                "inline": true
              },
              {
                "name": "💾 Commit",
                "value": "[\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                "inline": false
              },
              {
                "name": "🚀 Trigger",
                "value": "${{ needs.trigger-validation.outputs.deployment_reason }}",
                "inline": false
              },
              {
                "name": "🔗 Workflow Run",
                "value": "[View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                "inline": false
              }
            ]
          }]
        }
        EOF
          )
          
          # Discord 알림 전송
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "$PAYLOAD" \
            "${{ env.DISCORD_WEBHOOK_URL }}" \
            --silent --show-error || echo "⚠️ Discord notification failed"
          
          echo "✅ Discord notification sent for backend deployment failure"
        else
          echo "⚠️ DISCORD_WEBHOOK_URL not configured, skipping notification"
        fi

    # 🆕 성공 시 알림 추가 (기존 실패 알림 다음에)
    - name: ✅ Discord Notification - Backend Deployment Success
      if: success()
      run: |
        echo "✅ Backend deployment succeeded, sending Discord notification..."
        
        if [ -n "${{ env.DISCORD_WEBHOOK_URL }}" ]; then
          # Discord 메시지 생성 (초록색)
          EMBED_COLOR="5763719" # 초록색
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
        PAYLOAD=$(cat << EOF
        {
          "embeds": [{
            "title": "✅ Backend Deployment Success (with Video AI)",
            "description": "Test environment backend deployed with Vertex AI video generation",
            "color": $EMBED_COLOR,
            "timestamp": "$TIMESTAMP",
            "fields": [
              {
                "name": "🏷️ Job",
                "value": "${{ github.job }}",
                "inline": true
              },
              {
                "name": "🌿 Branch", 
                "value": "${{ github.ref_name }}",
                "inline": true
              },
              {
                "name": "👤 Actor",
                "value": "${{ github.actor }}",
                "inline": true
              },
              {
                "name": "🐳 Image",
                "value": "\`${{ steps.build.outputs.image_name }}:${{ steps.build.outputs.image_tag }}\`",
                "inline": false
              },
              {
                "name": "🎬 Video AI",
                "value": "Google Vertex AI Veo 3.0 (4s, 720p)",
                "inline": true
              },
              {
                "name": "🌐 Test URL",
                "value": "[${{ secrets.TEST_BACKEND_URL }}](${{ secrets.TEST_BACKEND_URL }}/health)",
                "inline": false
              }
            ]
          }]
        }
        EOF
        )
          
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "$PAYLOAD" \
            "${{ env.DISCORD_WEBHOOK_URL }}" \
            --silent --show-error || echo "⚠️ Discord notification failed"
            
          echo "✅ Discord success notification sent for backend deployment"
        else
          echo "⚠️ DISCORD_WEBHOOK_URL not configured, skipping notification"
        fi

  # ========== 프론트엔드 빌드 & 배포 ==========
  deploy-frontend:
    if: |
      github.event_name != 'pull_request' && 
      (needs.trigger-validation.outputs.should_deploy_frontend == 'true' || 
       github.event.inputs.deploy_frontend == 'true' ||
       github.event_name == 'schedule')
    needs: [trigger-validation, quality-gate]
    runs-on: ubuntu-latest
    name: 🎨 Deploy Frontend to Test
    environment: test

    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js with Cache
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 🔧 Install and Build Frontend (Test)
      run: |
        cd frontend
        echo "📦 Installing dependencies with fallback strategy..."
        
        npm ci --legacy-peer-deps || {
          echo "⚠️ npm ci failed, using fallback strategy"
          rm -f package-lock.json
          npm install --include=dev
        }
        
        echo "🔧 Installing cross-env for cross-platform compatibility..."
        npm install --save-dev cross-env || true
        
        echo "🔍 TypeScript validation (lenient for Test)..."
        npx tsc --noEmit --skipLibCheck --exclude "**/test/**" --exclude "**/*.test.*" || {
          echo "⚠️ TypeScript warnings exist but continuing"
        }
        
        echo "🏗️ Building for Test environment with video features..."
        rm -rf dist/
        
        # 🆕 비디오 기능 환경 변수 추가
        export VITE_API_URL="${{ secrets.TEST_BACKEND_URL }}"
        export VITE_NODE_ENV="test"
        export VITE_DEV_MODE="false"
        export VITE_DEPLOYMENT_TRIGGER="${{ needs.trigger-validation.outputs.deployment_reason }}"
        export VITE_DEPLOYMENT_COMMIT="${{ github.sha }}"
        
        # 🎬 Vertex AI 비디오 기능 환경 변수
        export VITE_FEATURE_VIDEO="true"
        export VITE_VIDEO_ASPECT="9:16"
        export VITE_VIDEO_DURATION="4"
        export VITE_VIDEO_RESOLUTION="720p"
        export VITE_VIDEO_PROMPT="Create a 4-second lookbook video for this outfit."
        export VITE_VIDEO_PROMPT_LOCK="false"
        
        npx vite build --mode test
        
        echo "📋 Build verification..."
        ls -la dist/
        echo "Build size: $(du -sh dist/ | cut -f1)"
        
        # 🆕 비디오 기능 빌드 확인
        if grep -q "VITE_FEATURE_VIDEO" dist/assets/*.js 2>/dev/null; then
          echo "✅ Video features included in build"
        else
          echo "⚠️ Video features may not be properly included"
        fi
        
        echo "✅ Frontend build completed successfully with video features"

    - name: 🚀 Deploy to Azure Static Web Apps (Test) (Enhanced)
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.TEST_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "frontend/dist"
        skip_app_build: true
        production_branch: "develop"
        skip_deploy_on_missing_secrets: true
      # 🆕 실패 처리 강화
      continue-on-error: false
      timeout-minutes: 10

    # 🆕 통합된 프론트엔드 배포 실패 로그 수집
    - name: 📋 Collect Frontend Deployment Logs (Comprehensive)
      if: failure()
      run: |
        echo "📋 Collecting comprehensive frontend deployment failure logs..."
        
        # 1. 🏗️ 빌드 아티팩트 정보
        echo "🏗️ Build Artifacts Analysis:"
        if [ -d "frontend/dist" ]; then
        echo "✅ Dist folder exists"
        ls -la frontend/dist/ || true
        echo "📦 Build size: $(du -sh frontend/dist/ | cut -f1)"
        
        # 주요 파일들 존재 확인
        [ -f "frontend/dist/index.html" ] && echo "✅ index.html found" || echo "❌ index.html missing"
        [ -d "frontend/dist/assets" ] && echo "✅ assets folder found" || echo "❌ assets folder missing"
        else
        echo "❌ Dist folder not found"
        fi
        
        # 2. 🟢 Node.js 환경 정보
        echo "🟢 Node.js Environment:"
        node --version || true
        npm --version || true
        npm list --depth=0 --prefix frontend || true
        
        # 3. ⚡ Vite 빌드 분석
        echo "⚡ Vite Build Analysis:"
        if [ -f "frontend/dist/.vite/manifest.json" ]; then
        echo "✅ Vite manifest found"
        cat frontend/dist/.vite/manifest.json || true
        else
        echo "❌ Vite manifest not found"
        fi
        
        # 4. 🔍 환경 변수 확인 (민감 정보 제외)
        echo "🔍 Build Environment Variables:"
        echo "NODE_VERSION: ${NODE_VERSION}"
        echo "VITE_API_URL: ${VITE_API_URL:-not set}"
        echo "VITE_NODE_ENV: ${VITE_NODE_ENV:-not set}"
        echo "NODE_ENV: ${NODE_ENV:-not set}"
        echo "Build location exists: $([ -d 'frontend/dist' ] && echo 'Yes' || echo 'No')"
        echo "Build files count: $([ -d 'frontend/dist' ] && find frontend/dist -type f | wc -l || echo '0')"
        
        # 5. 📝 TypeScript 컴파일 재확인
        echo "📝 TypeScript Check:"
        cd frontend
        npx tsc --noEmit --skipLibCheck || echo "⚠️ TypeScript issues detected"
        cd ..
        
        # 6. 🔍 Azure Static Web Apps 진단
        if command -v az &> /dev/null; then
        echo "🔍 Azure Static Web Apps Status:"
        az staticwebapp list --query "[?name=='wonderful-island-0c20d9b00'].{name:name,defaultHostname:defaultHostname,repositoryUrl:repositoryUrl}" --output table || true
        else
        echo "⚠️ Azure CLI not available for Static Web App diagnostics"
        fi
        
        # 7. 📊 실패 정보 저장
        echo "FRONTEND_FAILURE_REASON=Deployment step failed" >> $GITHUB_ENV
        echo "FRONTEND_FAILURE_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_ENV
        
        echo "✅ Comprehensive frontend failure log collection completed"
                
        # 🆕 여기에 추가
    - name: 🚨 Discord Notification - Frontend Deployment Failed
      if: failure()
      run: |
        echo "🚨 Frontend deployment failed, sending Discord notification..."
        
        if [ -n "${{ env.DISCORD_WEBHOOK_URL }}" ]; then
          # Discord 메시지 생성
          EMBED_COLOR="15158332" # 빨간색
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Discord Webhook 페이로드 생성
          PAYLOAD=$(cat << EOF
        {
          "embeds": [{
            "title": "🚨 Frontend Deployment Failed",
            "description": "Test environment frontend deployment encountered an error",
            "color": $EMBED_COLOR,
            "timestamp": "$TIMESTAMP",
            "fields": [
              {
                "name": "🏷️ Job",
                "value": "${{ github.job }}",
                "inline": true
              },
              {
                "name": "🌿 Branch",
                "value": "${{ github.ref_name }}",
                "inline": true
              },
              {
                "name": "👤 Actor",
                "value": "${{ github.actor }}",
                "inline": true
              },
              {
                "name": "💾 Commit",
                "value": "[\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                "inline": false
              },
              {
                "name": "🚀 Trigger",
                "value": "${{ needs.trigger-validation.outputs.deployment_reason }}",
                "inline": false
              },
              {
                "name": "🔗 Workflow Run",
                "value": "[View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                "inline": false
              }
            ]
          }]
        }
        EOF
          )
          
          # Discord 알림 전송
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "$PAYLOAD" \
            "${{ env.DISCORD_WEBHOOK_URL }}" \
            --silent --show-error || echo "⚠️ Discord notification failed"
          
          echo "✅ Discord notification sent for frontend deployment failure"
        else
          echo "⚠️ DISCORD_WEBHOOK_URL not configured, skipping notification"
        fi

    # 🆕 성공 시 알림 추가 (기존 실패 알림 다음에)
    - name: ✅ Discord Notification - Frontend Deployment Success
      if: success()
      run: |
        echo "✅ Frontend deployment succeeded, sending Discord notification..."
        
        if [ -n "${{ env.DISCORD_WEBHOOK_URL }}" ]; then
          # Discord 메시지 생성 (초록색)
          EMBED_COLOR="5763719" # 초록색  
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          PAYLOAD=$(cat << EOF
        {
          "embeds": [{
            "title": "✅ Frontend Deployment Success",
            "description": "Test environment frontend deployed successfully",
            "color": $EMBED_COLOR,
            "timestamp": "$TIMESTAMP",
            "fields": [
              {
                "name": "🏷️ Job",
                "value": "${{ github.job }}",
                "inline": true
              },
              {
                "name": "🌿 Branch",
                "value": "${{ github.ref_name }}",
                "inline": true
              },
              {
                "name": "👤 Actor",
                "value": "${{ github.actor }}",
                "inline": true
              },
              {
                "name": "🌐 Test URL",
                "value": "[${{ secrets.TEST_FRONTEND_URL }}](${{ secrets.TEST_FRONTEND_URL }})",
                "inline": false
              },
              {
                "name": "🔗 Workflow Run",
                "value": "[View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                "inline": false
              }
            ]
          }]
        }
        EOF
          )
          
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "$PAYLOAD" \
            "${{ env.DISCORD_WEBHOOK_URL }}" \
            --silent --show-error || echo "⚠️ Discord notification failed"
            
          echo "✅ Discord success notification sent for frontend deployment"
        else
          echo "⚠️ DISCORD_WEBHOOK_URL not configured, skipping notification"
        fi
    

  # ========== 헬스체크 & 통합 테스트 ==========
  health-check:
    needs: [trigger-validation, deploy-backend, deploy-frontend]
    if: always() && (needs.deploy-backend.result == 'success' || needs.deploy-frontend.result == 'success')
    runs-on: ubuntu-latest
    name: 🏥 Health Check & Integration Tests

    steps:
    - name: 🏥 Backend Health Check (Fast Debug Mode)
      if: needs.deploy-backend.result == 'success'
      run: |
        echo "🔍 Enhanced backend health check with debugging..."
        BACKEND_URL="${{ secrets.TEST_BACKEND_URL }}"
        
        echo "📋 Testing URL: ${BACKEND_URL}"
        
        # 1. 즉시 기본 연결 테스트 (빠른 실패)
        echo "🔍 Step 1: Immediate connection test"
        if ! curl -f -s --max-time 10 "${BACKEND_URL}" >/dev/null 2>&1; then
          echo "❌ Basic connection failed - checking specific endpoints"
        fi
        
        # 2. 단축된 헬스체크 (총 3분으로 단축)
        echo "🔍 Step 2: Fast health check (3 minutes max)"
        sleep 30  # 30초만 대기
        
        for i in {1..6}; do  # 6회로 단축
          echo "📡 Health check attempt $i/6..."
          
          # 상세한 응답 확인
          RESPONSE=$(curl -s -w "HTTPCODE:%{http_code}" --max-time 15 "${BACKEND_URL}/health" 2>&1)
          HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTPCODE:[0-9]*" | cut -d: -f2)
          
          echo "📊 HTTP Code: ${HTTP_CODE}"
          echo "📄 Response: ${RESPONSE}"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Test backend is healthy!"
            echo "BACKEND_HEALTH=success" >> $GITHUB_ENV
            break
          elif [ $i -eq 6 ]; then
            echo "❌ Backend failed after 6 attempts - checking diagnostics..."
            
            # 진단 정보 수집
            echo "🔍 Diagnostic attempts:"
            curl -v "${BACKEND_URL}/" || true
            curl -v "${BACKEND_URL}/health" || true
            curl -v "${BACKEND_URL}/api" || true
            
            # Azure CLI로 앱 상태 확인
            echo "🔍 Azure App Service status:"
            az webapp show --name "7ai-team1-backend-test" --resource-group "${{ env.AZURE_RESOURCE_GROUP_TEST }}" --query "{state:state,availabilityState:availabilityState,defaultHostName:defaultHostName}" --output table || true
            
            echo "BACKEND_HEALTH=failed" >> $GITHUB_ENV
            echo "⚠️ Backend health check failed - but continuing for diagnostic info"
            # exit 1 제거하여 계속 진행
          else
            echo "⏳ Attempt $i failed (HTTP: ${HTTP_CODE}), retrying in 20s..."
            sleep 20  # 20초로 단축
          fi
        done


    - name: 💾 Database Health Check (Detailed)
      if: needs.deploy-backend.result == 'success'
      run: |
        echo "💾 Checking database connection health..."
        BACKEND_URL="${{ secrets.TEST_BACKEND_URL }}"
        
        echo "🔍 Testing database-specific endpoint..."
        for i in {1..5}; do
          echo "📡 Database health check attempt $i/5..."
          
          # 데이터베이스 전용 헬스체크
          DB_RESPONSE=$(curl -s -w "HTTPCODE:%{http_code}" --max-time 30 "${BACKEND_URL}/health/database" 2>&1)
          DB_HTTP_CODE=$(echo "$DB_RESPONSE" | grep -o "HTTPCODE:[0-9]*" | cut -d: -f2)
          
          echo "📊 Database HTTP Code: ${DB_HTTP_CODE}"
          
          if [ "$DB_HTTP_CODE" = "200" ]; then
            echo "✅ Database connection is healthy!"
            echo "📋 Database response:"
            echo "$DB_RESPONSE" | sed 's/HTTPCODE:[0-9]*$//'
            echo "DATABASE_HEALTH=success" >> $GITHUB_ENV
            break
          elif [ "$DB_HTTP_CODE" = "503" ]; then
            echo "❌ Database connection failed (Service Unavailable)"
            echo "📋 Error details:"
            echo "$DB_RESPONSE" | sed 's/HTTPCODE:[0-9]*$//'
            
            if [ $i -eq 5 ]; then
              echo "DATABASE_HEALTH=failed" >> $GITHUB_ENV
              echo "🚨 Database health check failed after 5 attempts"
              # 실패해도 계속 진행 (다른 서비스는 정상일 수 있음)
            fi
          else
            echo "⚠️ Unexpected response code: ${DB_HTTP_CODE}"
            if [ $i -eq 5 ]; then
              echo "DATABASE_HEALTH=unknown" >> $GITHUB_ENV
            fi
          fi
          
          if [ $i -lt 5 ]; then
            echo "⏳ Waiting 20s before retry..."
            sleep 20
          fi
        done
        
        # 추가 진단 정보
        echo "🔍 Enhanced health check (with DB details)..."
        FULL_HEALTH=$(curl -s --max-time 30 "${BACKEND_URL}/health" 2>&1 || echo "Failed to get full health")
        echo "📊 Full health response:"
        echo "$FULL_HEALTH"


    - name: 🏥 Frontend Health Check
      if: needs.deploy-frontend.result == 'success'
      run: |
        echo "🔍 Test frontend health check..."
        FRONTEND_URL="${{ secrets.TEST_FRONTEND_URL }}"
        
        for i in {1..8}; do
          if curl -f -s --max-time 30 "${FRONTEND_URL}"; then
            echo "✅ Test frontend is healthy!"
            echo "FRONTEND_HEALTH=success" >> $GITHUB_ENV
            break
          elif [ $i -eq 8 ]; then
            echo "❌ Test frontend health check failed"
            echo "FRONTEND_HEALTH=failed" >> $GITHUB_ENV
            exit 1
          else
            echo "⏳ Frontend attempt $i failed, retrying in 15s..."
            sleep 15
          fi
        done

    - name: 🧪 Integration Tests
      if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success'
      run: |
        echo "🧪 Running integration tests..."
        
        BACKEND_URL="${{ secrets.TEST_BACKEND_URL }}"
        FRONTEND_URL="${{ secrets.TEST_FRONTEND_URL }}"
        
        echo "🔍 Testing API endpoints..."
        curl -f -s "${BACKEND_URL}/api" && echo "✅ API info endpoint working"
        curl -f -s "${BACKEND_URL}/health" && echo "✅ Health endpoint working"
        
        echo "🔍 Testing CORS configuration..."
        curl -H "Origin: ${FRONTEND_URL}" \
             -H "Access-Control-Request-Method: POST" \
             -H "Access-Control-Request-Headers: Content-Type" \
             -X OPTIONS "${BACKEND_URL}/api/generate" && echo "✅ CORS working"
        
        echo "✅ Integration tests completed successfully"

    - name: 📊 Enhanced Test Deployment Dashboard
      run: |
        echo "## 🧪 Test Environment Deployment Dashboard" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 배포 시간 및 메트릭 계산
        DEPLOYMENT_START="${{ github.event.head_commit.timestamp }}"
        DEPLOYMENT_END=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # 성공률 계산
        SUCCESS_COUNT=0
        TOTAL_COUNT=0
        
        [ "${{ needs.deploy-backend.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "${{ needs.deploy-frontend.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "${{ needs.trigger-validation.outputs.should_deploy_backend }}" = "true" ] && TOTAL_COUNT=$((TOTAL_COUNT + 1))
        [ "${{ needs.trigger-validation.outputs.should_deploy_frontend }}" = "true" ] && TOTAL_COUNT=$((TOTAL_COUNT + 1))
        
        if [ $TOTAL_COUNT -gt 0 ]; then
          SUCCESS_RATE=$(( (SUCCESS_COUNT * 100) / TOTAL_COUNT ))
          [ $SUCCESS_RATE -eq 100 ] && SUCCESS_EMOJI="🟢" || SUCCESS_EMOJI="🟡"
        else
          SUCCESS_RATE="N/A"
          SUCCESS_EMOJI="⚪"
        fi
        
        # 배포 메트릭
        echo "### 📊 Deployment Metrics" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **⏰ Start** | ${DEPLOYMENT_START:-N/A} |" >> $GITHUB_STEP_SUMMARY
        echo "| **🏁 End** | $DEPLOYMENT_END |" >> $GITHUB_STEP_SUMMARY
        echo "| **📈 Success Rate** | $SUCCESS_EMOJI ${SUCCESS_RATE}% ($SUCCESS_COUNT/$TOTAL_COUNT) |" >> $GITHUB_STEP_SUMMARY
        echo "| **🚀 Trigger** | ${{ needs.trigger-validation.outputs.deployment_reason }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 서비스 상태
        echo "### 🎯 Service Status" >> $GITHUB_STEP_SUMMARY
        
        # 백엔드 상태
        if [ "${{ needs.trigger-validation.outputs.should_deploy_backend }}" = "true" ]; then
          if [ "${{ needs.deploy-backend.result }}" = "success" ] && [ "${{ env.BACKEND_HEALTH }}" = "success" ]; then
            echo "🟢 **Backend**: ✅ Deployed & Healthy" >> $GITHUB_STEP_SUMMARY
            echo "   - 🌐 [${{ secrets.TEST_BACKEND_URL }}](${{ secrets.TEST_BACKEND_URL }}/health)" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔴 **Backend**: ❌ Failed or Unhealthy" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚪ **Backend**: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 프론트엔드 상태
        if [ "${{ needs.trigger-validation.outputs.should_deploy_frontend }}" = "true" ]; then
          if [ "${{ needs.deploy-frontend.result }}" = "success" ] && [ "${{ env.FRONTEND_HEALTH }}" = "success" ]; then
            echo "🟢 **Frontend**: ✅ Deployed & Healthy" >> $GITHUB_STEP_SUMMARY
            echo "   - 🌐 [${{ secrets.TEST_FRONTEND_URL }}](${{ secrets.TEST_FRONTEND_URL }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔴 **Frontend**: ❌ Failed or Unhealthy" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚪ **Frontend**: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 상세 정보
        echo "### 📋 Details" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Health |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend | ${{ needs.deploy-backend.result }} | ${{ env.BACKEND_HEALTH }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ${{ needs.deploy-frontend.result }} | ${{ env.FRONTEND_HEALTH }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | \`${{ github.sha }}\` | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 최종 상태
        if [ "$SUCCESS_RATE" = "100" ]; then
          echo "## 🎉 **Deployment Successful!** 🚀" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ **Partial Success** - Check Details Above" >> $GITHUB_STEP_SUMMARY
        fi

    # 🆕 여기에 추가
    - name: 🚨 Discord Notification - Health Check Failed
      if: failure()
      run: |
        echo "🚨 Health check failed, sending Discord notification..."
        
        if [ -n "${{ env.DISCORD_WEBHOOK_URL }}" ]; then
          # Discord 메시지 생성
          EMBED_COLOR="16776960" # 노란색 (경고)
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # 실패한 서비스 확인
          FAILED_SERVICES=""
          [ "${{ env.BACKEND_HEALTH }}" = "failed" ] && FAILED_SERVICES="Backend "
          [ "${{ env.FRONTEND_HEALTH }}" = "failed" ] && FAILED_SERVICES="${FAILED_SERVICES}Frontend"
          
          PAYLOAD=$(cat << EOF
        {
          "embeds": [{
            "title": "⚠️ Health Check Failed",
            "description": "Deployed services are not responding correctly",
            "color": $EMBED_COLOR,
            "timestamp": "$TIMESTAMP",
            "fields": [
              {
                "name": "🏥 Failed Services",
                "value": "$FAILED_SERVICES",
                "inline": true
              },
              {
                "name": "🌿 Branch",
                "value": "${{ github.ref_name }}",
                "inline": true
              },
              {
                "name": "👤 Actor",
                "value": "${{ github.actor }}",
                "inline": true
              },
              {
                "name": "🔗 Test URLs",
                "value": "Backend: ${{ secrets.TEST_BACKEND_URL }}\\nFrontend: ${{ secrets.TEST_FRONTEND_URL }}",
                "inline": false
              },
              {
                "name": "🔗 Workflow Run",
                "value": "[View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                "inline": false
              }
            ]
          }]
        }
        EOF
          )
          
          # Discord 알림 전송
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "$PAYLOAD" \
            "${{ env.DISCORD_WEBHOOK_URL }}" \
            --silent --show-error || echo "⚠️ Discord notification failed"
          
          echo "✅ Discord notification sent for health check failure"
        else
          echo "⚠️ DISCORD_WEBHOOK_URL not configured, skipping notification"
        fi

    # 🆕 전체 배포 완료 알림 추가
    - name: 🎉 Discord Notification - Full Deployment Complete
      if: success()
      run: |
        echo "🎉 Full deployment completed successfully, sending Discord notification..."
        
        if [ -n "${{ env.DISCORD_WEBHOOK_URL }}" ]; then
          # 배포된 서비스 확인
          DEPLOYED_SERVICES=""
          [ "${{ needs.deploy-backend.result }}" = "success" ] && DEPLOYED_SERVICES="Backend "
          [ "${{ needs.deploy-frontend.result }}" = "success" ] && DEPLOYED_SERVICES="${DEPLOYED_SERVICES}Frontend"
          
          # 성공률 계산
          SUCCESS_COUNT=0
          TOTAL_COUNT=0
          [ "${{ needs.deploy-backend.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "${{ needs.deploy-frontend.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "${{ needs.trigger-validation.outputs.should_deploy_backend }}" = "true" ] && TOTAL_COUNT=$((TOTAL_COUNT + 1))
          [ "${{ needs.trigger-validation.outputs.should_deploy_frontend }}" = "true" ] && TOTAL_COUNT=$((TOTAL_COUNT + 1))
          
          SUCCESS_RATE=$(( (SUCCESS_COUNT * 100) / TOTAL_COUNT ))
          
          EMBED_COLOR="5763719" # 초록색
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          PAYLOAD=$(cat << EOF
        {
          "embeds": [{
            "title": "🎉 Test Environment Deployment Complete",
            "description": "All services deployed and health checks passed",
            "color": $EMBED_COLOR,
            "timestamp": "$TIMESTAMP",
            "fields": [
              {
                "name": "📊 Success Rate",
                "value": "${SUCCESS_RATE}% (${SUCCESS_COUNT}/${TOTAL_COUNT})",
                "inline": true
              },
              {
                "name": "🎯 Deployed Services",
                "value": "$DEPLOYED_SERVICES",
                "inline": true
              },
              {
                "name": "👤 Actor",
                "value": "${{ github.actor }}",
                "inline": true
              },
              {
                "name": "🔗 Test Environment",
                "value": "Backend: [${{ secrets.TEST_BACKEND_URL }}](${{ secrets.TEST_BACKEND_URL }}/health)\\nFrontend: [${{ secrets.TEST_FRONTEND_URL }}](${{ secrets.TEST_FRONTEND_URL }})",
                "inline": false
              }
            ]
          }]
        }
        EOF
          )
          
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "$PAYLOAD" \
            "${{ env.DISCORD_WEBHOOK_URL }}" \
            --silent --show-error || echo "⚠️ Discord notification failed"
            
          echo "✅ Discord completion notification sent"
        else
          echo "⚠️ DISCORD_WEBHOOK_URL not configured, skipping notification"
        fi


  # ========== 자동 롤백 (완성) ==========
  auto-rollback:
    needs: health-check
    if: failure()
    runs-on: ubuntu-latest
    name: 🔄 Auto Rollback (Enhanced)
    environment: test

    steps:
    - name: 🔐 Login to Azure (for rollback)
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: 🔄 Rollback Backend to Previous Image (완성)
      if: needs.deploy-backend.result == 'success'
      run: |
        echo "🔄 Starting backend rollback process..."
        
        # 재시도 함수
        retry_az() {
          local cmd="$1"
          local desc="$2"
          
          for attempt in 1 2 3; do
            echo "🔄 [$attempt/3] $desc"
            if eval "$cmd"; then
              echo "✅ Success: $desc"
              return 0
            elif [ $attempt -eq 3 ]; then
              echo "❌ Failed: $desc"
              return 1
            else
              echo "⏳ Waiting 30s before retry..."
              sleep 30
            fi
          done
        }
        
        # 현재 배포된 이미지 정보 수집
        echo "🔍 Collecting current deployment info..."
        CURRENT_IMAGE=$(az webapp config container show \
          --name "${{ env.BACKEND_APP_NAME_TEST }}" \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP_TEST }}" \
          --query "image" -o tsv || echo "")
        
        echo "📋 Current image: $CURRENT_IMAGE"
        
        # 안전한 롤백 이미지 결정
        REGISTRY="${{ secrets.ACR_LOGIN_SERVER }}"
        ROLLBACK_IMAGE=""
        
        # 1. latest-stable 태그 시도
        if az acr repository show-tags --name "${REGISTRY##*/}" --repository "backend-fastapi-test" --query "[?name=='latest-stable'].name" -o tsv 2>/dev/null | grep -q "latest-stable"; then
          ROLLBACK_IMAGE="$REGISTRY/backend-fastapi-test:latest-stable"
          echo "🎯 Using latest-stable image: $ROLLBACK_IMAGE"
        else
          # 2. 최근 성공한 이미지 찾기 (현재 이미지 제외)
          echo "🔍 Searching for recent successful images..."
          RECENT_TAGS=$(az acr repository show-tags --name "${REGISTRY##*/}" --repository "backend-fastapi-test" --orderby time_desc --top 10 --query "[].name" -o tsv 2>/dev/null || echo "")
          
          for tag in $RECENT_TAGS; do
            CANDIDATE_IMAGE="$REGISTRY/backend-fastapi-test:$tag"
            if [ "$CANDIDATE_IMAGE" != "$CURRENT_IMAGE" ] && [ "$tag" != "latest" ]; then
              ROLLBACK_IMAGE="$CANDIDATE_IMAGE"
              echo "🎯 Using recent image: $ROLLBACK_IMAGE"
              break
            fi
          done
        fi
        
        # 롤백 실행
        if [ -n "$ROLLBACK_IMAGE" ]; then
          echo "📦 Rolling back to: $ROLLBACK_IMAGE"
          
          ROLLBACK_CMD="az webapp config container set \
            --name '${{ env.BACKEND_APP_NAME_TEST }}' \
            --resource-group '${{ env.AZURE_RESOURCE_GROUP_TEST }}' \
            --docker-custom-image-name '$ROLLBACK_IMAGE' \
            --docker-registry-server-url 'https://${{ secrets.ACR_LOGIN_SERVER }}' \
            --docker-registry-server-user '${{ secrets.ACR_USERNAME }}' \
            --docker-registry-server-password '${{ secrets.ACR_PASSWORD }}'"
          
          if retry_az "$ROLLBACK_CMD" "Backend rollback deployment"; then
            echo "✅ Rollback deployment initiated successfully"
            echo "ROLLBACK_STATUS=success" >> $GITHUB_ENV
            echo "ROLLBACK_IMAGE=$ROLLBACK_IMAGE" >> $GITHUB_ENV
          else
            echo "❌ Rollback deployment failed"
            echo "ROLLBACK_STATUS=failed" >> $GITHUB_ENV
          fi
        else
          echo "⚠️ No suitable rollback image found - manual intervention required"
          echo "🔍 Available images:"
          az acr repository show-tags --name "${REGISTRY##*/}" --repository "backend-fastapi-test" --top 5 --query "[].{Tag:name, Created:createdTime}" -o table || true
          echo "ROLLBACK_STATUS=no-image" >> $GITHUB_ENV
        fi

    - name: 🏥 Post-Rollback Health Check (완성)
      if: env.ROLLBACK_STATUS == 'success'
      run: |
        echo "🔍 Verifying rollback success..."
        BACKEND_URL="${{ secrets.TEST_BACKEND_URL }}"
        
        # 앱 재시작 대기
        echo "⏳ Waiting for app restart (2 minutes)..."
        sleep 120
        
        # 롤백 후 헬스체크 (최대 5분)
        ROLLBACK_HEALTHY=false
        for i in {1..15}; do
          echo "📡 Rollback health check $i/15..."
          
          RESPONSE=$(curl -s -w "HTTPCODE:%{http_code}" --max-time 20 "${BACKEND_URL}/health" 2>&1 || echo "HTTPCODE:000")
          HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTPCODE:[0-9]*" | cut -d: -f2)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Rollback successful - backend is healthy!"
            ROLLBACK_HEALTHY=true
            break
          else
            echo "⏳ Attempt $i failed (HTTP: ${HTTP_CODE}), retrying in 20s..."
            sleep 20
          fi
        done
        
        if [ "$ROLLBACK_HEALTHY" = "true" ]; then
          echo "🎉 Automatic rollback completed successfully!"
          echo "📋 Rolled back to: ${{ env.ROLLBACK_IMAGE }}"
        else
          echo "🚨 Rollback health check failed - service may still be unhealthy"
          echo "🔧 Manual intervention required"
        fi

    - name: 📊 Rollback Summary
      if: always()
      run: |
        echo "## 🔄 Automatic Rollback Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Rollback Status** | ${{ env.ROLLBACK_STATUS }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Target Image** | ${{ env.ROLLBACK_IMAGE }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Trigger** | Health check failure |" >> $GITHUB_STEP_SUMMARY
        echo "| **Time** | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ env.ROLLBACK_STATUS }}" = "success" ]; then
          echo "### ✅ Rollback Actions Completed" >> $GITHUB_STEP_SUMMARY
          echo "- Identified suitable rollback image" >> $GITHUB_STEP_SUMMARY
          echo "- Deployed previous stable version" >> $GITHUB_STEP_SUMMARY
          echo "- Verified service health" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ env.ROLLBACK_STATUS }}" = "no-image" ]; then
          echo "### ⚠️ Manual Intervention Required" >> $GITHUB_STEP_SUMMARY
          echo "- No suitable rollback image found" >> $GITHUB_STEP_SUMMARY
          echo "- Check ACR repository for available images" >> $GITHUB_STEP_SUMMARY
          echo "- Consider manual deployment of known stable version" >> $GITHUB_STEP_SUMMARY
        else
          echo "### 🚨 Rollback Failed" >> $GITHUB_STEP_SUMMARY
          echo "- Automatic rollback deployment failed" >> $GITHUB_STEP_SUMMARY
          echo "- Immediate manual intervention required" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 [Check App Service Status](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP_TEST }}/providers/Microsoft.Web/sites/${{ env.BACKEND_APP_NAME_TEST }}/overview)" >> $GITHUB_STEP_SUMMARY


  # ========== 배포 실패 종합 보고서 ==========
  collect-failure-logs:
    needs: [trigger-validation, quality-gate, deploy-backend, deploy-frontend, health-check, auto-rollback]
    if: failure()
    runs-on: ubuntu-latest
    name: 📊 Deployment Failure Analysis
    environment: test

    steps:
    - name: 🔐 Login to Azure (for log collection)
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: 📊 Generate Comprehensive Failure Report
      run: |
        echo "## 🚨 Deployment Failure Analysis Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 실패한 Job들 분석
        echo "### 📋 Failed Jobs Analysis" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status | Notes |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|-------|" >> $GITHUB_STEP_SUMMARY
        
        # 각 Job 상태 확인
        [ "${{ needs.quality-gate.result }}" = "failure" ] && echo "| Quality Gate | ❌ Failed | Code quality issues detected |" >> $GITHUB_STEP_SUMMARY
        [ "${{ needs.deploy-backend.result }}" = "failure" ] && echo "| Backend Deploy | ❌ Failed | Docker build or Azure deployment failed |" >> $GITHUB_STEP_SUMMARY
        [ "${{ needs.deploy-frontend.result }}" = "failure" ] && echo "| Frontend Deploy | ❌ Failed | Build or Static Web App deployment failed |" >> $GITHUB_STEP_SUMMARY
        [ "${{ needs.health-check.result }}" = "failure" ] && echo "| Health Check | ❌ Failed | Service health verification failed |" >> $GITHUB_STEP_SUMMARY
        [ "${{ needs.auto-rollback.result }}" = "failure" ] && echo "| Auto Rollback | ❌ Failed | Rollback process encountered issues |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 배포 컨텍스트 정보
        echo "### 🔍 Deployment Context" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger:** ${{ needs.trigger-validation.outputs.deployment_reason }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 실패 시점 정보
        if [ -n "${{ env.BACKEND_FAILURE_TIME }}" ] || [ -n "${{ env.FRONTEND_FAILURE_TIME }}" ]; then
          echo "### ⏰ Failure Timeline" >> $GITHUB_STEP_SUMMARY
          [ -n "${{ env.BACKEND_FAILURE_TIME }}" ] && echo "- **Backend Failed:** ${{ env.BACKEND_FAILURE_TIME }}" >> $GITHUB_STEP_SUMMARY
          [ -n "${{ env.FRONTEND_FAILURE_TIME }}" ] && echo "- **Frontend Failed:** ${{ env.FRONTEND_FAILURE_TIME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 추천 액션
        echo "### 🔧 Recommended Actions" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy-backend.result }}" = "failure" ]; then
          echo "#### Backend Issues:" >> $GITHUB_STEP_SUMMARY
          echo "- Check Docker build logs above" >> $GITHUB_STEP_SUMMARY
          echo "- Verify ACR connectivity and permissions" >> $GITHUB_STEP_SUMMARY
          echo "- Review App Service configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Check environment variables and secrets" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-frontend.result }}" = "failure" ]; then
          echo "#### Frontend Issues:" >> $GITHUB_STEP_SUMMARY
          echo "- Review TypeScript compilation errors" >> $GITHUB_STEP_SUMMARY
          echo "- Check Vite build configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Verify Static Web App token validity" >> $GITHUB_STEP_SUMMARY
          echo "- Review build environment variables" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.health-check.result }}" = "failure" ]; then
          echo "#### Health Check Issues:" >> $GITHUB_STEP_SUMMARY
          echo "- Service may be running but not responding correctly" >> $GITHUB_STEP_SUMMARY
          echo "- Check application logs in Azure Portal" >> $GITHUB_STEP_SUMMARY
          echo "- Verify API endpoints and CORS settings" >> $GITHUB_STEP_SUMMARY
          echo "- Consider manual health verification" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 유용한 링크들
        echo "### 🔗 Quick Access Links" >> $GITHUB_STEP_SUMMARY
        echo "- 🏥 [Backend App Service](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP_TEST }}/providers/Microsoft.Web/sites/${{ env.BACKEND_APP_NAME_TEST }})" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 [App Service Logs](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP_TEST }}/providers/Microsoft.Web/sites/${{ env.BACKEND_APP_NAME_TEST }}/logStream)" >> $GITHUB_STEP_SUMMARY
        echo "- 🐳 [Container Registry](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP_TEST }}/providers/Microsoft.ContainerRegistry/registries)" >> $GITHUB_STEP_SUMMARY
        echo "- 🎨 [Static Web Apps](https://portal.azure.com/#view/WebsitesExtension/StaticWebAppsLandingBlade)" >> $GITHUB_STEP_SUMMARY

    - name: 🔍 Deep Dive Diagnostics
      run: |
        echo "🔍 Performing deep dive diagnostics..."
        
        # Azure 리소스 상태 종합 확인
        echo "🏥 Azure Resources Health Check:"
        
        # App Service 상태
        echo "📱 App Service Status:"
        az webapp list \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP_TEST }}" \
          --query "[].{Name:name, State:state, Location:location, DefaultHostName:defaultHostName}" \
          --output table || true
        
        # Container Registry 상태
        echo "🐳 Container Registry Status:"
        az acr list \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP_TEST }}" \
          --query "[].{Name:name, LoginServer:loginServer, Status:status}" \
          --output table || true
        
        # 최근 Activity Log 확인
        echo "📋 Recent Activity Logs (Last 2 hours):"
        az monitor activity-log list \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP_TEST }}" \
          --start-time "$(date -d '2 hours ago' -u +%Y-%m-%dT%H:%M:%SZ)" \
          --query "[?level=='Error' || level=='Warning'].{Time:eventTimestamp, Level:level, Operation:operationName.localizedValue, Status:status.localizedValue}" \
          --output table || true

    - name: 📤 Upload Failure Artifacts
      if: always()
      uses: actions/upload-artifact@v4  # ✅ 최신 버전
      with:
        name: failure-logs-${{ github.sha }}
        path: |
          backend-logs.zip
          *.log
        retention-days: 30
        # 🆕 v4에서 추가된 옵션들
        compression-level: 6
        overwrite: true

